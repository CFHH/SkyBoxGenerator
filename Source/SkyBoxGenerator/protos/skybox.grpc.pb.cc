#pragma warning (push)
#pragma warning (disable : 4800)
#pragma warning (disable : 4125)
#pragma warning (disable : 4647)
#pragma warning (disable : 4668)
#pragma warning (disable : 4582)
#pragma warning (disable : 4583)
#pragma warning (disable : 4946)
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: skybox.proto

#include "skybox.pb.h"
#include "skybox.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace skybox {

static const char* SkyBoxService_method_names[] = {
  "/skybox.SkyBoxService/SayHello",
  "/skybox.SkyBoxService/GenerateSkyBox",
  "/skybox.SkyBoxService/QueryJob",
};

std::unique_ptr< SkyBoxService::Stub> SkyBoxService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SkyBoxService::Stub> stub(new SkyBoxService::Stub(channel, options));
  return stub;
}

SkyBoxService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayHello_(SkyBoxService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateSkyBox_(SkyBoxService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryJob_(SkyBoxService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SkyBoxService::Stub::SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::skybox::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::skybox::HelloRequest, ::skybox::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void SkyBoxService::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::skybox::HelloRequest, ::skybox::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void SkyBoxService::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>* SkyBoxService::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::skybox::HelloReply, ::skybox::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>* SkyBoxService::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SkyBoxService::Stub::GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::skybox::GenerateSkyBoxReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateSkyBox_, context, request, response);
}

void SkyBoxService::Stub::experimental_async::GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateSkyBox_, context, request, response, std::move(f));
}

void SkyBoxService::Stub::experimental_async::GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateSkyBox_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>* SkyBoxService::Stub::PrepareAsyncGenerateSkyBoxRaw(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::skybox::GenerateSkyBoxReply, ::skybox::GenerateSkyBoxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateSkyBox_, context, request);
}

::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>* SkyBoxService::Stub::AsyncGenerateSkyBoxRaw(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateSkyBoxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SkyBoxService::Stub::QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::skybox::QueryJobReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::skybox::QueryJobRequest, ::skybox::QueryJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryJob_, context, request, response);
}

void SkyBoxService::Stub::experimental_async::QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::skybox::QueryJobRequest, ::skybox::QueryJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryJob_, context, request, response, std::move(f));
}

void SkyBoxService::Stub::experimental_async::QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>* SkyBoxService::Stub::PrepareAsyncQueryJobRaw(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::skybox::QueryJobReply, ::skybox::QueryJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>* SkyBoxService::Stub::AsyncQueryJobRaw(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

SkyBoxService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SkyBoxService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SkyBoxService::Service, ::skybox::HelloRequest, ::skybox::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SkyBoxService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::skybox::HelloRequest* req,
             ::skybox::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SkyBoxService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SkyBoxService::Service, ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SkyBoxService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::skybox::GenerateSkyBoxRequest* req,
             ::skybox::GenerateSkyBoxReply* resp) {
               return service->GenerateSkyBox(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SkyBoxService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SkyBoxService::Service, ::skybox::QueryJobRequest, ::skybox::QueryJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SkyBoxService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::skybox::QueryJobRequest* req,
             ::skybox::QueryJobReply* resp) {
               return service->QueryJob(ctx, req, resp);
             }, this)));
}

SkyBoxService::Service::~Service() {
}

::grpc::Status SkyBoxService::Service::SayHello(::grpc::ServerContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SkyBoxService::Service::GenerateSkyBox(::grpc::ServerContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SkyBoxService::Service::QueryJob(::grpc::ServerContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace skybox
#pragma warning(pop)
