// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: skybox.proto
#ifndef GRPC_skybox_2eproto__INCLUDED
#define GRPC_skybox_2eproto__INCLUDED

#include "skybox.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace skybox {

class SkyBoxService final {
 public:
  static constexpr char const* service_full_name() {
    return "skybox.SkyBoxService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::skybox::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::skybox::GenerateSkyBoxReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::GenerateSkyBoxReply>> AsyncGenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::GenerateSkyBoxReply>>(AsyncGenerateSkyBoxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::GenerateSkyBoxReply>> PrepareAsyncGenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::GenerateSkyBoxReply>>(PrepareAsyncGenerateSkyBoxRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::skybox::QueryJobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::QueryJobReply>> AsyncQueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::QueryJobReply>>(AsyncQueryJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::QueryJobReply>> PrepareAsyncQueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::skybox::QueryJobReply>>(PrepareAsyncQueryJobRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::skybox::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::skybox::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::skybox::GenerateSkyBoxReply>* AsyncGenerateSkyBoxRaw(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::skybox::GenerateSkyBoxReply>* PrepareAsyncGenerateSkyBoxRaw(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::skybox::QueryJobReply>* AsyncQueryJobRaw(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::skybox::QueryJobReply>* PrepareAsyncQueryJobRaw(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::skybox::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::skybox::GenerateSkyBoxReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>> AsyncGenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>>(AsyncGenerateSkyBoxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>> PrepareAsyncGenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>>(PrepareAsyncGenerateSkyBoxRaw(context, request, cq));
    }
    ::grpc::Status QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::skybox::QueryJobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>> AsyncQueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>>(AsyncQueryJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>> PrepareAsyncQueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>>(PrepareAsyncQueryJobRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SayHello(::grpc::ClientContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GenerateSkyBox(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryJob(::grpc::ClientContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::skybox::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::skybox::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>* AsyncGenerateSkyBoxRaw(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::skybox::GenerateSkyBoxReply>* PrepareAsyncGenerateSkyBoxRaw(::grpc::ClientContext* context, const ::skybox::GenerateSkyBoxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>* AsyncQueryJobRaw(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::skybox::QueryJobReply>* PrepareAsyncQueryJobRaw(::grpc::ClientContext* context, const ::skybox::QueryJobRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateSkyBox_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response);
    virtual ::grpc::Status GenerateSkyBox(::grpc::ServerContext* context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response);
    virtual ::grpc::Status QueryJob(::grpc::ServerContext* context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::skybox::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::skybox::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateSkyBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateSkyBox() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GenerateSkyBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSkyBox(::grpc::ServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateSkyBox(::grpc::ServerContext* context, ::skybox::GenerateSkyBoxRequest* request, ::grpc::ServerAsyncResponseWriter< ::skybox::GenerateSkyBoxReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryJob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryJob(::grpc::ServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryJob(::grpc::ServerContext* context, ::skybox::QueryJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::skybox::QueryJobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_GenerateSkyBox<WithAsyncMethod_QueryJob<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::skybox::HelloRequest, ::skybox::HelloReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::skybox::HelloRequest* request, ::skybox::HelloReply* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::experimental::MessageAllocator< ::skybox::HelloRequest, ::skybox::HelloReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::skybox::HelloRequest, ::skybox::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SayHello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateSkyBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GenerateSkyBox() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::skybox::GenerateSkyBoxRequest* request, ::skybox::GenerateSkyBoxReply* response) { return this->GenerateSkyBox(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateSkyBox(
        ::grpc::experimental::MessageAllocator< ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateSkyBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSkyBox(::grpc::ServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateSkyBox(
      ::grpc::CallbackServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateSkyBox(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::skybox::QueryJobRequest, ::skybox::QueryJobReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::skybox::QueryJobRequest* request, ::skybox::QueryJobReply* response) { return this->QueryJob(context, request, response); }));}
    void SetMessageAllocatorFor_QueryJob(
        ::grpc::experimental::MessageAllocator< ::skybox::QueryJobRequest, ::skybox::QueryJobReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::skybox::QueryJobRequest, ::skybox::QueryJobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryJob(::grpc::ServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryJob(
      ::grpc::CallbackServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_GenerateSkyBox<ExperimentalWithCallbackMethod_QueryJob<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_GenerateSkyBox<ExperimentalWithCallbackMethod_QueryJob<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateSkyBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateSkyBox() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GenerateSkyBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSkyBox(::grpc::ServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryJob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryJob(::grpc::ServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateSkyBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateSkyBox() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GenerateSkyBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSkyBox(::grpc::ServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateSkyBox(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryJob() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryJob(::grpc::ServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SayHello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateSkyBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateSkyBox() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateSkyBox(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateSkyBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateSkyBox(::grpc::ServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateSkyBox(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateSkyBox(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryJob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryJob(::grpc::ServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::skybox::HelloRequest, ::skybox::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::skybox::HelloRequest, ::skybox::HelloReply>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::skybox::HelloRequest* /*request*/, ::skybox::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::skybox::HelloRequest,::skybox::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateSkyBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateSkyBox() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::skybox::GenerateSkyBoxRequest, ::skybox::GenerateSkyBoxReply>* streamer) {
                       return this->StreamedGenerateSkyBox(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateSkyBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateSkyBox(::grpc::ServerContext* /*context*/, const ::skybox::GenerateSkyBoxRequest* /*request*/, ::skybox::GenerateSkyBoxReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateSkyBox(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::skybox::GenerateSkyBoxRequest,::skybox::GenerateSkyBoxReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryJob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::skybox::QueryJobRequest, ::skybox::QueryJobReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::skybox::QueryJobRequest, ::skybox::QueryJobReply>* streamer) {
                       return this->StreamedQueryJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryJob(::grpc::ServerContext* /*context*/, const ::skybox::QueryJobRequest* /*request*/, ::skybox::QueryJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::skybox::QueryJobRequest,::skybox::QueryJobReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_GenerateSkyBox<WithStreamedUnaryMethod_QueryJob<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_GenerateSkyBox<WithStreamedUnaryMethod_QueryJob<Service > > > StreamedService;
};

}  // namespace skybox


#endif  // GRPC_skybox_2eproto__INCLUDED
